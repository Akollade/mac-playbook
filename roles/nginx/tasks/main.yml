---

- name: Generate config for homepage
  template:
    src: local-homepage/config.php.j2
    dest: '{{ playbook_dev_path | realpath }}/local-homepage/config/nginx.config.php'

- name: Install nginx
  homebrew:
    name: nginx
    state: "{{ homebrew_package_state }}"

- name: Create conf directory
  file:
    path: '{{ item }}'
    state: directory
  with_items:
    - "{{ nginx_confs_path }}"
    - "{{ nginx_certificates_path }}"
    - "{{ nginx_vhosts_path }}"

- name: Add confs
  template:
    src: "conf/{{ item }}.j2"
    dest: "{{ nginx_confs_path }}/{{ item }}"
  with_items: "{{ nginx_site_types }}"
  notify: Restart nginx

- name: Add nginx conf
  template:
    src: nginx.conf.j2
    dest: '{{ nginx_conf_file_path }}'
  notify: Restart nginx

- name: Add default site
  template:
    src: sites/default.j2
    dest: '{{ nginx_vhosts_path }}/default'
  notify: Restart nginx

- name: Check config of each sites
  fail:
    msg: "Type {{ item.type }} does not exist"
  when: item.type != 'custom' and item.type not in nginx_site_types
  with_items: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.type }}"

- name: Add site
  template:
    src: sites/site.j2
    dest: '{{ nginx_vhosts_path }}/dev'
  notify: Restart nginx

- name: Create certs
  shell: "mkcert -cert-file {{ nginx_certificates_path }}/{{ item.name }}.crt -key-file {{ nginx_certificates_path }}/{{ item.name }}.key {{ item.server_name }}"
  with_items: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  notify: Restart nginx

- name: Remove old entries in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "# Ansible managed"
    state: absent
  become: true

- name: Updating the /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 {{ item.server_name }} # Ansible managed"
  with_items: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.server_name }}"
  become: true