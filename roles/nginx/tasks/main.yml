---

- name: Set exec right on HOME directory
  file:
    path: '{{ ansible_env.HOME }}'
    state: directory
    mode: "u=rxw,g=rx,o=rx"

- name: Generate config for homepage
  template:
    src: local-homepage/config.php.j2
    dest: '{{ playbook_dev_path | realpath }}/local-homepage/config/nginx.config.php'

- name: Install nginx
  homebrew:
    name: nginx
    state: "{{ homebrew_package_state }}"

- name: Create conf directory
  file:
    path: '{{ item }}'
    state: directory
  with_items:
    - "{{ nginx_confs_path }}"
    - "{{ nginx_vhosts_path }}"

- name: Clean old directory
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - "{{ nginx_path }}/certificates"

- name: Add nginx conf
  template:
    src: nginx.conf.j2
    dest: '{{ nginx_conf_file_path }}'
  notify: Restart nginx

- name: Create list of homepage server names of all php versions
  set_fact: 
    nginx_php_server_names: "{{ nginx_php_server_names  | default([]) + ['php' + item|replace('.', '') + '.localhost'] }}" 
  with_items: "{{ php_versions }}"

- name: Create list of server names of all sites
  set_fact: 
    nginx_sites_server_names: "{{ (nginx_system_sites + nginx_sites) | map(attribute='server_name') | list }}" 

- name: Add default site
  template:
    src: sites/default.j2
    dest: '{{ nginx_vhosts_path }}/default'
  notify: Restart nginx

- name: Check config of each sites
  fail:
    msg: "Type {{ item.type }} does not exist"
  when: item.when|default(true) and item.type != 'custom' and item.type not in nginx_site_types
  with_items: "{{ nginx_system_sites + nginx_sites }}"
  loop_control:
    label: "{{ item.type }}"

- name: Add site
  template:
    src: sites/site.j2
    dest: '{{ nginx_vhosts_path }}/dev'
  notify: Restart nginx

- name: Create certificate
  shell: mkcert -cert-file {{ nginx_ssl_certificate }} -key-file {{ nginx_ssl_certificate_key }} "{{ (nginx_certificates + nginx_sites_server_names + nginx_php_server_names) | join('" "') }}"
  notify: Restart nginx

- name: Remove old entries in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "# Ansible managed"
    state: absent
  become: true

- name: Updating the /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "127.0.0.1 {{ item }} # Ansible managed"
  when: item.when|default(true) 
  with_items: "{{ nginx_sites_server_names + nginx_php_server_names }}"
  loop_control:
    label: "{{ item }}"
  become: true